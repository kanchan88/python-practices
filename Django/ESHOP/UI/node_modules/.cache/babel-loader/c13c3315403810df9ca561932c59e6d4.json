{"ast":null,"code":"var _jsxFileName = \"/home/evazs/Documents/Projects/BrainStrom-Admin/src/pages/BookGoogleEvent.js\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\nimport StaticDatePicker from '@mui/lab/StaticDatePicker';\nimport { Container, Grid, Typography, Button } from '@mui/material';\nimport ToggleButton from '@mui/material/ToggleButton';\nimport ToggleButtonGroup from '@mui/material/ToggleButtonGroup';\n/* global gapi */\n// prettier-ignore\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function BookGoogleEvent() {\n  _s();\n\n  let month = '01';\n  const [value, setValue] = React.useState('');\n  const [showTime, setShowTime] = React.useState(false);\n  const [view, setView] = React.useState('');\n  const [time, setTime] = React.useState(0);\n\n  const handleChange = (event, nextView) => {\n    setView(nextView);\n    setTime(parseInt(nextView, 10));\n  };\n\n  const CLIENT_ID = '927832324416-9t64nstt3omba55i2rh1ds5lc2r3ba9m.apps.googleusercontent.com';\n  const API_KEY = 'AIzaSyAyrE8iaEIFNlVsqsLvwRKFeiPf1Yh7tFU';\n  const DISCOVERY_DOCS = ['https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest'];\n  const SCOPES = 'https://www.googleapis.com/auth/calendar'; // required time format: 2021-12-24T19:00:00%s\n\n  const bookevent = () => {\n    dateConverter(); // gapi.load('client:auth2', () => {\n    //   gapi.client.init({\n    //     apiKey: API_KEY,\n    //     clientId: CLIENT_ID,\n    //     discoveryDocs: DISCOVERY_DOCS,\n    //     scope: SCOPES\n    //   });\n    //   gapi.client.load('calendar', 'v3', () => console.log('DONE'));\n    //   gapi.auth2\n    //     .getAuthInstance()\n    //     .signIn()\n    //     .then(() => {\n    //       const event = {\n    //         \"summary\": \"Brainstorm Consulation\",\n    //         \"description\": \"A chance to hear more about our services\",\n    //         \"start\": {\n    //           \"dateTime\": \"2022-01-10T09:00:00+05:45\"\n    //         },\n    //         \"end\": {\n    //           \"dateTime\": \"2022-01-10T10:00:00+05:45\"\n    //         },\n    //         \"sendNotifications\": true,\n    //         \"attendees\": [\n    //           { \"email\": \"kanchanwalks@gmail.com\" },\n    //           { \"email\": \"mailtokanchanbhatta@gmail.com\" }\n    //         ]\n    //       };\n    //       const request = gapi.client.calendar.events.insert({\n    //         calendarId: 'primary',\n    //         resource: event\n    //       });\n    //       console.log(request);\n    //       request.execute((event) => {\n    //         window.open(event.htmlLink);\n    //       });\n    //     });\n    // });\n  };\n\n  const [finalDate, setFinalDate] = React.useState('');\n  const [endDate, setEndFinalDate] = React.useState('');\n\n  const dateConverter = () => {\n    const cDate = value.toString();\n    const myDate = cDate.split(' ');\n\n    if (myDate[1] === 'Jan') {\n      month = '01';\n    }\n\n    if (myDate[1] === 'Feb') {\n      month = '02';\n    }\n\n    if (myDate[1] === 'Mar') {\n      month = '03';\n    }\n\n    if (myDate[1] === 'April') {\n      month = '04';\n    }\n\n    if (myDate[1] === 'May') {\n      month = '05';\n    }\n\n    if (myDate[1] === 'Jun') {\n      month = '06';\n    }\n\n    if (myDate[1] === 'Jul') {\n      month = '07';\n    }\n\n    if (myDate[1] === 'Aug') {\n      month = '08';\n    }\n\n    if (myDate[1] === 'Sep') {\n      month = '09';\n    }\n\n    if (myDate[1] === 'Oct') {\n      month = '10';\n    }\n\n    if (myDate[1] === 'Nov') {\n      month = '11';\n    }\n\n    if (myDate[1] === 'Dec') {\n      month = '12';\n    }\n\n    const theDate = `${myDate[3]}-${month}-${myDate[2]}T${time}:00:00+05:45`;\n    const endingDate = `${myDate[3]}-${month}-${myDate[2]}T${time + 1}:00:00+05:45`;\n    setFinalDate(theDate);\n    console.log(`Start: ${theDate}`);\n    setEndFinalDate(endingDate);\n    console.log(`Start: ${endingDate}`);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: time !== 0 ? /*#__PURE__*/_jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        children: [\"You choose to Book your meet on \", /*#__PURE__*/_jsxDEV(\"b\", {\n          children: [\" \", value.toString().slice(4, 15), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 43\n        }, this), \" from \", /*#__PURE__*/_jsxDEV(\"b\", {\n          children: [time, \":00 \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 88\n        }, this), \" to \", /*#__PURE__*/_jsxDEV(\"b\", {\n          children: [time + 1, \":00\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 109\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 2,\n      mb: 3,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 9,\n        children: /*#__PURE__*/_jsxDEV(LocalizationProvider, {\n          dateAdapter: AdapterDateFns,\n          children: /*#__PURE__*/_jsxDEV(StaticDatePicker, {\n            disablePast: true,\n            orientation: \"landscape\",\n            openTo: \"day\",\n            value: value,\n            onChange: newValue => {\n              setValue(newValue);\n              setShowTime(true);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this), showTime ? /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 2,\n        mt: 2,\n        children: [/*#__PURE__*/_jsxDEV(ToggleButtonGroup, {\n          orientation: \"vertical\",\n          value: view,\n          color: \"primary\",\n          size: \"large\",\n          exclusive: true,\n          fullWidth: true,\n          onChange: handleChange,\n          children: [/*#__PURE__*/_jsxDEV(ToggleButton, {\n            value: \"10\",\n            children: \"10 AM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(ToggleButton, {\n            value: \"11\",\n            children: \"11 AM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(ToggleButton, {\n            value: \"12\",\n            children: \"12 PM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(ToggleButton, {\n            value: \"13\",\n            children: \"1 PM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(ToggleButton, {\n            value: \"14\",\n            children: \"2 PM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(ToggleButton, {\n            value: \"15\",\n            children: \"3 PM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(ToggleButton, {\n            value: \"16\",\n            children: \"4 PM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(ToggleButton, {\n            value: \"17\",\n            children: \"5 PM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: bookevent,\n          children: \"Book Now\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Container, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, this);\n}\n\n_s(BookGoogleEvent, \"AZUICCOoHGc0xr9ym/80DNIrkrM=\");\n\n_c = BookGoogleEvent;\n\nvar _c;\n\n$RefreshReg$(_c, \"BookGoogleEvent\");","map":{"version":3,"sources":["/home/evazs/Documents/Projects/BrainStrom-Admin/src/pages/BookGoogleEvent.js"],"names":["React","AdapterDateFns","LocalizationProvider","StaticDatePicker","Container","Grid","Typography","Button","ToggleButton","ToggleButtonGroup","BookGoogleEvent","month","value","setValue","useState","showTime","setShowTime","view","setView","time","setTime","handleChange","event","nextView","parseInt","CLIENT_ID","API_KEY","DISCOVERY_DOCS","SCOPES","bookevent","dateConverter","finalDate","setFinalDate","endDate","setEndFinalDate","cDate","toString","myDate","split","theDate","endingDate","console","log","slice","newValue"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\nimport StaticDatePicker from '@mui/lab/StaticDatePicker';\nimport { Container, Grid, Typography, Button } from '@mui/material';\n\nimport ToggleButton from '@mui/material/ToggleButton';\nimport ToggleButtonGroup from '@mui/material/ToggleButtonGroup';\n\n/* global gapi */\n// prettier-ignore\n\nexport default function BookGoogleEvent() {\n  let month = '01';\n\n  const [value, setValue] = React.useState('');\n  const [showTime, setShowTime] = React.useState(false);\n\n  const [view, setView] = React.useState('');\n  const [time, setTime] = React.useState(0);\n\n  const handleChange = (event, nextView) => {\n    setView(nextView);\n    setTime(parseInt(nextView, 10));\n  };\n\n  const CLIENT_ID = '927832324416-9t64nstt3omba55i2rh1ds5lc2r3ba9m.apps.googleusercontent.com';\n  const API_KEY = 'AIzaSyAyrE8iaEIFNlVsqsLvwRKFeiPf1Yh7tFU';\n  const DISCOVERY_DOCS = ['https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest'];\n  const SCOPES = 'https://www.googleapis.com/auth/calendar';\n\n  // required time format: 2021-12-24T19:00:00%s\n  const bookevent = () => {\n    dateConverter();\n\n    // gapi.load('client:auth2', () => {\n    //   gapi.client.init({\n    //     apiKey: API_KEY,\n    //     clientId: CLIENT_ID,\n    //     discoveryDocs: DISCOVERY_DOCS,\n    //     scope: SCOPES\n    //   });\n\n    //   gapi.client.load('calendar', 'v3', () => console.log('DONE'));\n\n    //   gapi.auth2\n    //     .getAuthInstance()\n    //     .signIn()\n    //     .then(() => {\n    //       const event = {\n    //         \"summary\": \"Brainstorm Consulation\",\n    //         \"description\": \"A chance to hear more about our services\",\n    //         \"start\": {\n    //           \"dateTime\": \"2022-01-10T09:00:00+05:45\"\n    //         },\n    //         \"end\": {\n    //           \"dateTime\": \"2022-01-10T10:00:00+05:45\"\n    //         },\n    //         \"sendNotifications\": true,\n    //         \"attendees\": [\n    //           { \"email\": \"kanchanwalks@gmail.com\" },\n    //           { \"email\": \"mailtokanchanbhatta@gmail.com\" }\n    //         ]\n    //       };\n\n    //       const request = gapi.client.calendar.events.insert({\n    //         calendarId: 'primary',\n    //         resource: event\n    //       });\n\n    //       console.log(request);\n\n    //       request.execute((event) => {\n    //         window.open(event.htmlLink);\n    //       });\n    //     });\n    // });\n  };\n\n  const [finalDate, setFinalDate] = React.useState('');\n  const [endDate, setEndFinalDate] = React.useState('');\n  const dateConverter = () => {\n    const cDate = value.toString();\n    const myDate = cDate.split(' ');\n    if (myDate[1] === 'Jan') {\n      month = '01';\n    }\n    if (myDate[1] === 'Feb') {\n      month = '02';\n    }\n    if (myDate[1] === 'Mar') {\n      month = '03';\n    }\n    if (myDate[1] === 'April') {\n      month = '04';\n    }\n    if (myDate[1] === 'May') {\n      month = '05';\n    }\n    if (myDate[1] === 'Jun') {\n      month = '06';\n    }\n    if (myDate[1] === 'Jul') {\n      month = '07';\n    }\n    if (myDate[1] === 'Aug') {\n      month = '08';\n    }\n    if (myDate[1] === 'Sep') {\n      month = '09';\n    }\n    if (myDate[1] === 'Oct') {\n      month = '10';\n    }\n    if (myDate[1] === 'Nov') {\n      month = '11';\n    }\n    if (myDate[1] === 'Dec') {\n      month = '12';\n    }\n\n    const theDate = `${myDate[3]}-${month}-${myDate[2]}T${time}:00:00+05:45`;\n    const endingDate = `${myDate[3]}-${month}-${myDate[2]}T${time+1}:00:00+05:45`;\n    setFinalDate(theDate);\n    console.log(`Start: ${theDate}`);\n    setEndFinalDate(endingDate);\n    console.log(`Start: ${endingDate}`);\n\n  };\n\n  return (\n    <Container>\n    {time !== 0?(\n      <Container>\n        <Typography>\n          You choose to Book your meet on <b> {value.toString().slice(4,15)} </b> from <b>{time}:00 </b> to <b>{time+1}:00</b>\n        </Typography>\n      </Container>\n    ):(\n      <Grid container spacing={2} mb={3}>\n        <Grid item xs={9}>\n          <LocalizationProvider dateAdapter={AdapterDateFns}>\n            <StaticDatePicker\n              disablePast\n              orientation=\"landscape\"\n              openTo=\"day\"\n              value={value}\n              onChange={(newValue) => {\n                setValue(newValue);\n                setShowTime(true);\n              }}\n            />\n          </LocalizationProvider>\n        </Grid>\n        {showTime ? (\n          <Grid item xs={2} mt={2}>\n            <ToggleButtonGroup\n              orientation=\"vertical\"\n              value={view}\n              color=\"primary\"\n              size=\"large\"\n              exclusive\n              fullWidth\n              onChange={handleChange}\n            >\n              <ToggleButton value=\"10\">10 AM</ToggleButton>\n              <ToggleButton value=\"11\">11 AM</ToggleButton>\n              <ToggleButton value=\"12\">12 PM</ToggleButton>\n              <ToggleButton value=\"13\">1 PM</ToggleButton>\n              <ToggleButton value=\"14\">2 PM</ToggleButton>\n              <ToggleButton value=\"15\">3 PM</ToggleButton>\n              <ToggleButton value=\"16\">4 PM</ToggleButton>\n              <ToggleButton value=\"17\">5 PM</ToggleButton>\n            </ToggleButtonGroup>\n            <Button onClick={bookevent}>Book Now</Button>\n          </Grid>\n        ) : (\n          <Container />\n        )}\n      </Grid>\n    \n    )}\n    </Container>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}