{"ast":null,"code":"var _jsxFileName = \"/home/evazs/Documents/Projects/BrainStrom-Admin/src/pages/BookGoogleEvent.js\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\nimport StaticDatePicker from '@mui/lab/StaticDatePicker';\nimport { Container, Grid, Typography } from '@mui/material';\nimport ToggleButton from '@mui/material/ToggleButton';\nimport ToggleButtonGroup from '@mui/material/ToggleButtonGroup';\n/* global gapi */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function BookGoogleEvent() {\n  _s();\n\n  let month = '01';\n  const [value, setValue] = React.useState('');\n  const [showTime, setShowTime] = React.useState(false);\n  const [view, setView] = React.useState('');\n\n  const handleChange = (event, nextView) => {\n    setView(nextView);\n  };\n\n  const CLIENT_ID = '927832324416-9t64nstt3omba55i2rh1ds5lc2r3ba9m.apps.googleusercontent.com';\n  const API_KEY = 'AIzaSyAyrE8iaEIFNlVsqsLvwRKFeiPf1Yh7tFU';\n  const DISCOVERY_DOCS = ['https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest'];\n  const SCOPES = 'https://www.googleapis.com/auth/calendar'; // required time format: 2021-12-24T19:00:00%s\n\n  const bookevent = () => {\n    dateConverter();\n    gapi.load('client:auth2', () => {\n      gapi.client.init({\n        apiKey: API_KEY,\n        clientId: CLIENT_ID,\n        discoveryDocs: DISCOVERY_DOCS,\n        scope: SCOPES\n      });\n      gapi.client.load('calendar', 'v3', () => console.log('DONE'));\n      gapi.auth2.getAuthInstance().signIn().then(() => {\n        const event = {\n          summary: 'Brainstorm Consulation',\n          location: 'Online Event via Google Meet',\n          description: 'A chance to hear more about our services.',\n          start: {\n            dateTime: '2022-01-10T09:00:00-07:00',\n            timeZone: 'America/Los_Angeles'\n          },\n          sendNotifications: true,\n          end: {\n            dateTime: '2022-01-10T11:00:00-07:00',\n            timeZone: 'America/Los_Angeles'\n          },\n          attendees: [{\n            email: 'kanchanwalks@gmail.com'\n          }, {\n            email: 'mailtokanchanbhatta@gmail.com'\n          }],\n          reminders: {\n            useDefault: false,\n            overrides: [{\n              method: 'email',\n              minutes: 24 * 60\n            }, {\n              method: 'popup',\n              minutes: 10\n            }]\n          }\n        };\n        const request = gapi.client.calendar.events.insert({\n          calendarId: 'primary',\n          resource: event\n        });\n        request.execute(event => {\n          window.open(event.htmlLink);\n        });\n      });\n    });\n  };\n\n  const [finalDate, setFinalDate] = React.useState('');\n\n  const dateConverter = () => {\n    const cDate = value.toString();\n    const myDate = cDate.split(' ');\n\n    if (myDate[1] === 'Jan') {\n      month = '01';\n    }\n\n    if (myDate[1] === 'Feb') {\n      month = '02';\n    }\n\n    if (myDate[1] === 'Mar') {\n      month = '03';\n    }\n\n    if (myDate[1] === 'April') {\n      month = '04';\n    }\n\n    if (myDate[1] === 'May') {\n      month = '05';\n    }\n\n    if (myDate[1] === 'Jun') {\n      month = '06';\n    }\n\n    if (myDate[1] === 'Jul') {\n      month = '07';\n    }\n\n    if (myDate[1] === 'Aug') {\n      month = '08';\n    }\n\n    if (myDate[1] === 'Sep') {\n      month = '09';\n    }\n\n    if (myDate[1] === 'Oct') {\n      month = '10';\n    }\n\n    if (myDate[1] === 'Nov') {\n      month = '11';\n    }\n\n    if (myDate[1] === 'Dec') {\n      month = '12';\n    }\n\n    const theDate = `${myDate[3]}-${month}-${myDate[2]}T${view}:00:00%s`;\n    setFinalDate(theDate);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 2,\n      mb: 3,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 9,\n        children: /*#__PURE__*/_jsxDEV(LocalizationProvider, {\n          dateAdapter: AdapterDateFns,\n          children: /*#__PURE__*/_jsxDEV(StaticDatePicker, {\n            disablePast: true,\n            orientation: \"landscape\",\n            openTo: \"day\",\n            value: value,\n            onChange: newValue => {\n              setValue(newValue);\n              setShowTime(true);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this), showTime ? /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 2,\n        mt: 2,\n        children: [/*#__PURE__*/_jsxDEV(ToggleButtonGroup, {\n          orientation: \"vertical\",\n          value: view,\n          color: \"primary\",\n          size: \"large\",\n          exclusive: true,\n          fullWidth: true,\n          onChange: handleChange,\n          children: [/*#__PURE__*/_jsxDEV(ToggleButton, {\n            value: \"10\",\n            children: \"10 AM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(ToggleButton, {\n            value: \"11\",\n            children: \"11 AM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(ToggleButton, {\n            value: \"12\",\n            children: \"12 PM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(ToggleButton, {\n            value: \"13\",\n            children: \"1 PM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(ToggleButton, {\n            value: \"14\",\n            children: \"2 PM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(ToggleButton, {\n            value: \"15\",\n            children: \"3 PM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(ToggleButton, {\n            value: \"16\",\n            children: \"4 PM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(ToggleButton, {\n            value: \"17\",\n            children: \"5 PM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          onClick: bookevent,\n          children: \"Book Now\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Container, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, this);\n}\n\n_s(BookGoogleEvent, \"ZBLHyE4DbNf6axf3eIuLIGALgfE=\");\n\n_c = BookGoogleEvent;\n\nvar _c;\n\n$RefreshReg$(_c, \"BookGoogleEvent\");","map":{"version":3,"sources":["/home/evazs/Documents/Projects/BrainStrom-Admin/src/pages/BookGoogleEvent.js"],"names":["React","AdapterDateFns","LocalizationProvider","StaticDatePicker","Container","Grid","Typography","ToggleButton","ToggleButtonGroup","BookGoogleEvent","month","value","setValue","useState","showTime","setShowTime","view","setView","handleChange","event","nextView","CLIENT_ID","API_KEY","DISCOVERY_DOCS","SCOPES","bookevent","dateConverter","gapi","load","client","init","apiKey","clientId","discoveryDocs","scope","console","log","auth2","getAuthInstance","signIn","then","summary","location","description","start","dateTime","timeZone","sendNotifications","end","attendees","email","reminders","useDefault","overrides","method","minutes","request","calendar","events","insert","calendarId","resource","execute","window","open","htmlLink","finalDate","setFinalDate","cDate","toString","myDate","split","theDate","newValue"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\nimport StaticDatePicker from '@mui/lab/StaticDatePicker';\nimport { Container, Grid, Typography } from '@mui/material';\n\nimport ToggleButton from '@mui/material/ToggleButton';\nimport ToggleButtonGroup from '@mui/material/ToggleButtonGroup';\n\n/* global gapi */\n\nexport default function BookGoogleEvent() {\n  let month = '01';\n\n  const [value, setValue] = React.useState('');\n  const [showTime, setShowTime] = React.useState(false);\n\n  const [view, setView] = React.useState('');\n\n  const handleChange = (event, nextView) => {\n    setView(nextView);\n  };\n\n  const CLIENT_ID = '927832324416-9t64nstt3omba55i2rh1ds5lc2r3ba9m.apps.googleusercontent.com';\n  const API_KEY = 'AIzaSyAyrE8iaEIFNlVsqsLvwRKFeiPf1Yh7tFU';\n  const DISCOVERY_DOCS = ['https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest'];\n  const SCOPES = 'https://www.googleapis.com/auth/calendar';\n\n  // required time format: 2021-12-24T19:00:00%s\n  const bookevent = () => {\n    dateConverter();\n\n    gapi.load('client:auth2', () => {\n      gapi.client.init({\n        apiKey: API_KEY,\n        clientId: CLIENT_ID,\n        discoveryDocs: DISCOVERY_DOCS,\n        scope: SCOPES\n      });\n\n      gapi.client.load('calendar', 'v3', () => console.log('DONE'));\n\n      gapi.auth2\n        .getAuthInstance()\n        .signIn()\n        .then(() => {\n          const event = {\n            summary: 'Brainstorm Consulation',\n            location: 'Online Event via Google Meet',\n            description: 'A chance to hear more about our services.',\n            start: {\n              dateTime: '2022-01-10T09:00:00-07:00',\n              timeZone: 'America/Los_Angeles'\n            },\n            sendNotifications: true,\n            end: {\n              dateTime: '2022-01-10T11:00:00-07:00',\n              timeZone: 'America/Los_Angeles'\n            },\n            attendees: [\n              { email: 'kanchanwalks@gmail.com' },\n              { email: 'mailtokanchanbhatta@gmail.com' }\n            ],\n            reminders: {\n              useDefault: false,\n              overrides: [\n                { method: 'email', minutes: 24 * 60 },\n                { method: 'popup', minutes: 10 }\n              ]\n            }\n          };\n\n          const request = gapi.client.calendar.events.insert({\n            calendarId: 'primary',\n            resource: event\n          });\n\n          request.execute((event) => {\n            window.open(event.htmlLink);\n          });\n        });\n    });\n  };\n\n  const [finalDate, setFinalDate] = React.useState('');\n\n  const dateConverter = () => {\n    const cDate = value.toString();\n    const myDate = cDate.split(' ');\n    if (myDate[1] === 'Jan') {\n      month = '01';\n    }\n    if (myDate[1] === 'Feb') {\n      month = '02';\n    }\n    if (myDate[1] === 'Mar') {\n      month = '03';\n    }\n    if (myDate[1] === 'April') {\n      month = '04';\n    }\n    if (myDate[1] === 'May') {\n      month = '05';\n    }\n    if (myDate[1] === 'Jun') {\n      month = '06';\n    }\n    if (myDate[1] === 'Jul') {\n      month = '07';\n    }\n    if (myDate[1] === 'Aug') {\n      month = '08';\n    }\n    if (myDate[1] === 'Sep') {\n      month = '09';\n    }\n    if (myDate[1] === 'Oct') {\n      month = '10';\n    }\n    if (myDate[1] === 'Nov') {\n      month = '11';\n    }\n    if (myDate[1] === 'Dec') {\n      month = '12';\n    }\n\n    const theDate = `${myDate[3]}-${month}-${myDate[2]}T${view}:00:00%s`;\n    setFinalDate(theDate);\n  };\n\n  return (\n    <Container>\n      <Grid container spacing={2} mb={3}>\n        <Grid item xs={9}>\n          <LocalizationProvider dateAdapter={AdapterDateFns}>\n            <StaticDatePicker\n              disablePast\n              orientation=\"landscape\"\n              openTo=\"day\"\n              value={value}\n              onChange={(newValue) => {\n                setValue(newValue);\n                setShowTime(true);\n              }}\n            />\n          </LocalizationProvider>\n        </Grid>\n        {showTime ? (\n          <Grid item xs={2} mt={2}>\n            <ToggleButtonGroup\n              orientation=\"vertical\"\n              value={view}\n              color=\"primary\"\n              size=\"large\"\n              exclusive\n              fullWidth\n              onChange={handleChange}\n            >\n              <ToggleButton value=\"10\">10 AM</ToggleButton>\n              <ToggleButton value=\"11\">11 AM</ToggleButton>\n              <ToggleButton value=\"12\">12 PM</ToggleButton>\n              <ToggleButton value=\"13\">1 PM</ToggleButton>\n              <ToggleButton value=\"14\">2 PM</ToggleButton>\n              <ToggleButton value=\"15\">3 PM</ToggleButton>\n              <ToggleButton value=\"16\">4 PM</ToggleButton>\n              <ToggleButton value=\"17\">5 PM</ToggleButton>\n            </ToggleButtonGroup>\n            <Typography onClick={bookevent}>Book Now</Typography>\n          </Grid>\n        ) : (\n          <Container />\n        )}\n      </Grid>\n    </Container>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}